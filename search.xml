<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Dash—API文档查询利器</title>
      <link href="/2020/01/31/dash-api-wen-dang-cha-xun-li-qi/"/>
      <url>/2020/01/31/dash-api-wen-dang-cha-xun-li-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="Dash-for-mac"><a href="#Dash-for-mac" class="headerlink" title="Dash for mac"></a>Dash for mac</h2><p>Dash是一个API文档浏览器（ API Documentation Browser），以及代码片段管理工具（Code Snippet Manager）。Dash的功能非常强大，可以总结为如下几点：</p><ul><li><strong>离线文档查阅</strong>：Dash相当于一个文档的托管平台，可以从官方API文档、第三方文档库（Github，Stack Overflow）上下载文档，集中在Dash上查阅管理，并且保证自动更新。</li><li><strong>第三方工具集成</strong>：与各个工具及编辑器、IDE无缝集成，包括jetBrain家族、Xcode、Alfred等等，在你使用这些平台时能够快捷查阅文档。</li><li><strong>自定义数据来源</strong>：除了离线文档，包含 Google、Stack Overflow，你还可以自定义来自诸如 Medium、Quora 等任何你需要的网站。</li><li><strong>注释功能</strong>：方便快速的注释、标记功能。</li></ul><h3 id="离线文档查阅"><a href="#离线文档查阅" class="headerlink" title="离线文档查阅"></a>离线文档查阅</h3><h4 id="文档下载"><a href="#文档下载" class="headerlink" title="文档下载"></a>文档下载</h4><p>点击<code>Dash-&gt;Preferences-&gt;Download</code>，左侧为文档来源库，右侧是可供选择的API文档。</p><img src="/post_graphs/image-20200308165403354.png" alt="文档下载" style="zoom:50%;"><p>同时，Dash很棒的一点就是支持<code>Stack Overflow</code>和<code>Github</code>，点击左侧中<code>Other docsets</code>中的<code>Github</code>，就可以尽情搜索git上的<code>repo</code>并下载下来，可以说是应有尽有了~~</p><img src="/post_graphs/image-20200308173735981.png" alt="github repo下载" style="zoom:50%;"><h4 id="文档查询"><a href="#文档查询" class="headerlink" title="文档查询"></a>文档查询</h4><p>文档查询是Dash最核心的功能，既可以在所有已下载的文档中进行检索，也可以选中某一特定文档后在输入关键词进行检索，Dash的检索效率非常之高，比普通的网页搜索要快得多。</p><p>这里我们以<code>C++</code>的文档为例，它被合理分为了「运行环境」、「类」、「结构」、「类别」、「枚举类」等n个模块，所有相关内容可以快速一览无余。</p><img src="/post_graphs/image-20200308184752821.png" alt="i查询有关C++内容" style="zoom:50%;"><p>比较惊喜的的发现是<code>Playground</code>，点开发现是一个在线的小型<code>C++11</code>IDE，在不需要创建c++文件的基础上可以快速运行一些代码片段。</p><p><img src="/post_graphs/image-20200308185411125.png" alt="小型线上IDE"></p><p>在搜索框中输入<code>vector</code>，可以快速查阅到<code>vector</code>类的所有详细介绍</p><p><img src="/post_graphs/image-20200308185719893.png" alt="stl库中的vector介绍"></p><h3 id="第三方工具集成"><a href="#第三方工具集成" class="headerlink" title="第三方工具集成"></a>第三方工具集成</h3><p>Dash融合性极强，下载相应的插件即可在下列软件中快速使用Dash进行查询。下载插件的方法点击<strong>相应图标</strong>即可获得。</p><p><img src="/post_graphs/image-20200308190004381.png" alt="可以集成的第三方软件列表"></p><p>这里我们看一下在<code>Clion</code>中下载了插件的效果~</p><p><img src="/gif/Dash%E5%BF%AB%E9%80%9F%E6%93%8D%E4%BD%9C.gif" alt="Dash快速操作"></p><p>可以自定义快捷键查询，简单又高效🥳</p><h3 id="自定义数据来源"><a href="#自定义数据来源" class="headerlink" title="自定义数据来源"></a>自定义数据来源</h3><p>已包含在<code>Web Search</code>的数据来源有<code>Google</code>和<code>Stack Overflow</code>，可以再添加别的网站作为数据来源。点击<code>Dash-&gt;Preferences-&gt;Web Search</code>，点击左下角的小加号，即可添加网站。在这里，Dash已经给了我们例子~</p><p><img src="/post_graphs/image-20200308193919969.png" alt="输入网址定义数据来源"></p><p>我们以国际版的必应网站为例，进行一番操作</p><p>![添加web search](/gif/添加web search.gif)</p><h3 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h3><p>Dash提供了在文档的任意位置添加注释的功能</p><img src="/post_graphs/image-20200308194652363.png" alt="添加注释" style="zoom:50%;"><p>之后可以随意查看✌️</p><h2 id="Dash的使用小技巧"><a href="#Dash的使用小技巧" class="headerlink" title="Dash的使用小技巧"></a>Dash的使用小技巧</h2><p>Dash的功能极其强大，但却需要一些小技巧来更好地使用它。</p><h3 id="解决文档下载过慢问题"><a href="#解决文档下载过慢问题" class="headerlink" title="解决文档下载过慢问题"></a>解决文档下载过慢问题</h3><p>因为Dash的下载链接经常不稳定，作者为我们提供了若干台服务器，有的时候下载几百M的文档根本下载不下来，还没到几十M的时候就下载失败了。因此我们需要知道哪些服务器下载速度快，使用下载工具从速度快的服务器把文档搞下来，然后本地导入到Dash中。</p><h4 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h4><ul><li>加速下载工具<ul><li>参考的原博文推的是迅雷，但是后来使用过程中发现迅雷也不是很给力TAT</li><li><code>aria2c</code>：<code>aria2c</code>是一个用来下载百度网盘里资源的好东西（奥利给！），目前存在的可视化web页面<a href="https://link.jianshu.com/?t=http://ziahamza.github.io/webui-aria2/" target="_blank" rel="noopener">Aria2 WebUI</a>代替了在命令行中的操作。不过我一般用<code>aria2c</code>都是用来下载百度云中的东西（限速限的太狠了😭），下载普通网页链接感觉也没有特别大的提速。</li><li><code>axel</code>：<code>axel</code>是在<code>Linux</code>和<code>Unix</code>系统下的多线程下载利器。对于<code>Mac OSX</code>，直接用<code>homebrew</code>下载<code>axel</code>即可——<code>brew install axel</code>。本例子中我采用了<code>axel</code>进行下载，效果卓著！</li></ul></li><li>Postman</li></ul><h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><ol><li><p><strong>断开网络连接</strong></p><p>直接点击关闭Wi-Fi即可</p><img src="/post_graphs/image-20200308212601140.png" alt="关闭网络连接" style="zoom:50%;"></li><li><p><strong>获取文档的下载地址</strong></p><p>打开<code>Dash-Preferences-Downloads</code>，点击想要下载的文档，这里我们选择<code>R</code>，但因为已经断开网络，因此点击<code>Download</code>后会有错误消息提示，错误消息中说明了文档下载的地址：</p><p><img src="/post_graphs/image-20200308213048615.png" alt="报错信息"></p><p>对此地址进行复制</p></li><li><p><strong>获取文档的所有具体的下载地址</strong></p><p>重新打开网络连接，打开<code>Postman</code>，将请求方式设置为 <code>GET</code> ，在请求地址栏输入刚刚复制的URL地址，即上一步复制的 , 再点击 <code>Send</code> 按钮获取对应文档的所有的具体的下载地址。</p><p><img src="/post_graphs/image-20200308213712023.png" alt="获取文档所有下载地址"></p><p>接下来就可以用我刚才介绍的那三种方法下载啦~（推荐使用第三种）每个链接的下载速度差很多，可以自行测试，在我的电脑上最后一个链接的下载速度最快（也不知道是不是离得近的原因）</p></li><li><p><strong>解压下载的文档</strong></p><p>在任意目录下（看个人喜好）新建一个存放所有Dash文档的目录，例如<code>/Users/xxx/Download/Docsets/</code>。选中下载的压缩包，例如上述的<code>R.tgz</code>，创建名为<code>R</code>的文件夹，将<code>R.tgz</code>移动到<code>R</code>文件夹中并进行解压，接着把<code>R</code>文件夹移动到刚才新建的<code>Docsets</code>目录下。</p></li><li><p><strong>添加下载的文档</strong></p><p>打开Dash的主页面，点击<code>Manage Docsets-&gt;左下侧加号-&gt;Add Local Docsets</code>，选中刚才解压好的<code>R</code>，点击<code>open</code>将其导入。</p></li></ol><p>之后就可以愉快地查阅文档啦~~</p><h3 id="添加中文文档（可选）"><a href="#添加中文文档（可选）" class="headerlink" title="添加中文文档（可选）"></a>添加中文文档（可选）</h3><p>在Dash中下载的文档是全英的，有些小伙伴可能看着不适应，会去网上找中文版本的来下载下来然后本地导入。我上网大概搜了一下，目前供Dash使用的中文文档，汇总的有<a href="https://github.com/nauxliu/Dash-docsets-CN" target="_blank" rel="noopener">Dash-docsets-CN</a>，只提供<code>php</code>，<code>Pyhon3</code>和<code>Laravel</code>。其实大家还是要强迫自己看英文文档的，毕竟关于计算机的很多文档都是英文的且没有翻译版，大家加油~~</p><h3 id="man-page下载"><a href="#man-page下载" class="headerlink" title="man page下载"></a>man page下载</h3><p>Dash的文档下载目录中包含了<code>Mac OSX</code>和<code>Linux</code>系统下的<code>man pages</code>。但点击<code>Linux Man Page</code>的Download时它会报错——</p><img src="/post_graphs/image-20200308221101316.png" alt="man page下载提示" style="zoom:50%;"><p>点击<code>Open Instructions</code>，看看到底如何导入linux的<code>man pages</code></p><p><img src="/post_graphs/image-20200308221227761.png" alt="下载指导"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/31/hello-world/"/>
      <url>/2020/01/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
